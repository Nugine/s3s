use crate::f;
use crate::gen::Codegen;
use crate::ops::Operations;
use crate::rust::codegen_doc;

use heck::ToSnakeCase;

pub fn codegen(ops: &Operations, g: &mut Codegen) {
    g.lines([
        "//! Auto generated by codegen/src/s3_trait.rs",
        "",
        "use crate::dto::*;",
        "use crate::error::S3Result;",
        "use crate::ops::Identity;",
        "",
        "/// An async trait which represents the S3 API",
        "#[async_trait::async_trait]",
        "pub trait S3: Send + Sync + 'static {",
        "",
    ]);

    for op in ops.values() {
        let method_name = op.name.to_snake_case();

        codegen_doc(op.doc.as_deref(), g);
        g.ln(f!(
            "async fn {method_name}(&self, _input: {}, _identity: Identity) -> S3Result<{}> {{",
            op.input,
            op.output
        ));
        g.ln(f!("Err(s3_error!(NotImplemented, \"{} is not implemented yet\"))", op.name));
        g.ln("}");
        g.lf();
    }

    g.ln("}");
    g.lf();
}
