name: Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  skip-check:
    permissions:
      actions: write
      contents: read
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: true
          paths_ignore: '["*.md"]'

  # This job builds and pushes a single-architecture image for each platform in the matrix.
  # It runs on native hardware for each architecture, avoiding emulation.
  build:
    needs: skip-check
    if: needs.skip-check.outputs.should_skip != 'true'
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: read
      packages: write
      actions: write # Required to upload artifacts
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runs-on: ubuntu-24.04
            arch: amd64
          - platform: linux/arm64
            runs-on: ubuntu-24.04-arm
            arch: arm64
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
      # Note: setup-qemu-action is removed as we are building on native runners.
      - uses: docker/setup-buildx-action@v3
        with:
          config: .github/buildkitd.toml

      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/s3s
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push single-architecture image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # This pushes the image manifest by digest, not tag.
          # The digest is captured as an output of this step.
          outputs: type=image,name=${{ vars.DOCKER_USERNAME }}/s3s,push-by-digest=true,name-canonical=true

      - name: Export digest to artifact
        run: |
          mkdir -p /tmp/digests
          echo "${{ steps.build.outputs.digest }}" > /tmp/digests/digest-${{ matrix.arch }}
      - uses: actions/upload-artifact@v4
        with:
          name: digest-${{ matrix.arch }}
          path: /tmp/digests/

  # This job runs after all architecture-specific builds are complete.
  # It creates and pushes a multi-platform manifest list pointing to the images built in the previous job.
  publish:
    needs: [build]
    if: needs.skip-check.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download amd64 digest
        uses: actions/download-artifact@v4
        with:
          name: digest-amd64
          path: /tmp/digest-amd64

      - name: Download arm64 digest
        uses: actions/download-artifact@v4
        with:
          name: digest-arm64
          path: /tmp/digest-arm64

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/s3s
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Create and push multi-platform manifest
        run: |
          # Read digests from the downloaded artifact files
          DIGEST_AMD64=$(cat /tmp/digest-amd64/digest-amd64)
          DIGEST_ARM64=$(cat /tmp/digest-arm64/digest-arm64)
          IMAGE_NAME="${{ vars.DOCKER_USERNAME }}/s3s"

          echo "Digests found: AMD64=${DIGEST_AMD64}, ARM64=${DIGEST_ARM64}"

          # Loop through all the tags generated by the metadata action
          for tag in ${{ fromJSON(steps.meta.outputs.json).tags }}; do
            echo "Creating and pushing manifest for tag: $tag"
            docker manifest create "$tag" \
              "$IMAGE_NAME@$DIGEST_AMD64" \
              "$IMAGE_NAME@$DIGEST_ARM64"
            docker manifest push "$tag"
          done

